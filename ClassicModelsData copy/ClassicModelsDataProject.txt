Q1. 
SELECT COUNT(DISTINCT customerNumber)
FROM orders;

Q2.
SELECT offices.city, COUNT(employees.employeeNumber) AS NumberOfEmployees
FROM offices JOIN employees ON offices.officeCode = employees.officeCode
GROUP BY offices.officeCode;

Q3.
SELECT orderdetails.orderNumber, SUM(orderdetails.quantityOrdered) AS orderQuantity 
FROM orderdetails
GROUP BY orderdetails.orderNumber
ORDER BY orderQuantity DESC LIMIT 10;

Q4.
SELECT customers.customerName, SUM(orderdetails.priceEach * orderdetails.quantityOrdered) AS TotalValueofOrders
FROM orderdetails 
JOIN orders USING(orderNumber) 
JOIN customers USING(customerNumber) 
GROUP BY customers.customerName;

Q5.
SELECT customers.country, SUM(orderdetails.priceEach * orderdetails.quantityOrdered) AS TotalValueofOrders
FROM orderdetails 
JOIN orders USING(orderNumber) 
JOIN customers USING(customerNumber) 
GROUP BY customers.country;

Q6.
SELECT products.productName, products.MSRP, (SELECT AVG(products.MSRP) FROM products) AS AverageMSRP
FROM products
WHERE products.MSRP > (SELECT AVG(products.MSRP) FROM products)
GROUP BY products.productName
ORDER BY products.MSRP;

Q7.
SELECT (SELECT COUNT(products.productName) FROM products WHERE products.productName LIKE "%FORD%") * 100 / COUNT(products.productName)
AS ProportionOfFordProducts
FROM products;

Q8.
SET @A = 100;
SET @B = 150;

SELECT products.productName, products.MSRP, @A, @B
FROM products
WHERE products.MSRP > @A AND products.MSRP < @B
ORDER BY products.MSRP;

Q9.
CREATE TEMPORARY TABLE TotalValueofOrdersTable AS
SELECT customers.customerName, SUM(orderdetails.priceEach * orderdetails.quantityOrdered) AS TotalValueofOrders
FROM orderdetails 
JOIN orders USING(orderNumber) 
JOIN customers USING(customerNumber) 
GROUP BY customers.customerName;

SELECT * FROM TotalValueofOrdersTable;

CREATE TEMPORARY TABLE AmountPaidTable AS
SELECT customers.customerName, SUM(payments.amount) AS AmountPaid
FROM customers 
JOIN payments USING(customerNumber)
WHERE payments.customerNumber = customers.customerNumber
GROUP BY customers.customerName;

SELECT * FROM AmountPaidTable;

SELECT TotalValueofOrdersTable.customerName, (TotalValueofOrders - AmountPaid) AS AmountOwed
FROM TotalValueofOrdersTable JOIN AmountPaidTable USING(customerName)
GROUP BY TotalValueofOrdersTable.customerName
HAVING AmountOwed > 0;

Q10.
SELECT products.productName, products.productCode
FROM products 
LEFT JOIN orderdetails ON products.productCode = orderdetails.productCode
WHERE orderdetails.productCode is NULL;













